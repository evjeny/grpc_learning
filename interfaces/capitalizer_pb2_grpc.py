# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import capitalizer_pb2 as capitalizer__pb2


class CapitalizerStub(object):
    """Service for string manipulations
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Capitalize = channel.unary_unary(
                '/Capitalizer/Capitalize',
                request_serializer=capitalizer__pb2.StringRequest.SerializeToString,
                response_deserializer=capitalizer__pb2.StringResponse.FromString,
                )
        self.Upper = channel.unary_unary(
                '/Capitalizer/Upper',
                request_serializer=capitalizer__pb2.StringRequest.SerializeToString,
                response_deserializer=capitalizer__pb2.StringResponse.FromString,
                )
        self.Lower = channel.unary_unary(
                '/Capitalizer/Lower',
                request_serializer=capitalizer__pb2.StringRequest.SerializeToString,
                response_deserializer=capitalizer__pb2.StringResponse.FromString,
                )
        self.DrawA = channel.unary_unary(
                '/Capitalizer/DrawA',
                request_serializer=capitalizer__pb2.FileRequest.SerializeToString,
                response_deserializer=capitalizer__pb2.FileResponse.FromString,
                )


class CapitalizerServicer(object):
    """Service for string manipulations
    """

    def Capitalize(self, request, context):
        """Make first letter upper case
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Upper(self, request, context):
        """Make all letters upper case
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Lower(self, request, context):
        """Make all letters lower case
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DrawA(self, request, context):
        """Draw upper case A on image
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CapitalizerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Capitalize': grpc.unary_unary_rpc_method_handler(
                    servicer.Capitalize,
                    request_deserializer=capitalizer__pb2.StringRequest.FromString,
                    response_serializer=capitalizer__pb2.StringResponse.SerializeToString,
            ),
            'Upper': grpc.unary_unary_rpc_method_handler(
                    servicer.Upper,
                    request_deserializer=capitalizer__pb2.StringRequest.FromString,
                    response_serializer=capitalizer__pb2.StringResponse.SerializeToString,
            ),
            'Lower': grpc.unary_unary_rpc_method_handler(
                    servicer.Lower,
                    request_deserializer=capitalizer__pb2.StringRequest.FromString,
                    response_serializer=capitalizer__pb2.StringResponse.SerializeToString,
            ),
            'DrawA': grpc.unary_unary_rpc_method_handler(
                    servicer.DrawA,
                    request_deserializer=capitalizer__pb2.FileRequest.FromString,
                    response_serializer=capitalizer__pb2.FileResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Capitalizer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Capitalizer(object):
    """Service for string manipulations
    """

    @staticmethod
    def Capitalize(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Capitalizer/Capitalize',
            capitalizer__pb2.StringRequest.SerializeToString,
            capitalizer__pb2.StringResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Upper(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Capitalizer/Upper',
            capitalizer__pb2.StringRequest.SerializeToString,
            capitalizer__pb2.StringResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Lower(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Capitalizer/Lower',
            capitalizer__pb2.StringRequest.SerializeToString,
            capitalizer__pb2.StringResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DrawA(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Capitalizer/DrawA',
            capitalizer__pb2.FileRequest.SerializeToString,
            capitalizer__pb2.FileResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
